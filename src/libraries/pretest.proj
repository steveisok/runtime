<Project>
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" />

  <PropertyGroup>
    <BuildDependsOnTargets>GenerateLaunchSettingsFiles</BuildDependsOnTargets>
    <BuildDependsOnTargets Condition="'$(BinplaceTestSharedFramework)' == 'true'">$(BuildDependsOnTargets);GenerateTestSharedFrameworkDepsFile</BuildDependsOnTargets>
    <BuildDependsOnTargets Condition="'$(PlatformManifestFile)' != ''">$(BuildDependsOnTargets);GenerateFileVersionProps</BuildDependsOnTargets>
    <NETCoreAppFrameworkIdentifier>.NETCoreApp</NETCoreAppFrameworkIdentifier>
    <SharedFrameworkName>Microsoft.NETCore.App</SharedFrameworkName>
    <TargetFrameworkIdentifier>netcoreapp</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>5.0</TargetFrameworkVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- This is necessary as inside VS project references that aren't part of the sln aren't built. -->
    <Project Include="$(CommonTestPath)\CoreFx.Private.TestUtilities\CoreFx.Private.TestUtilities.csproj" />
  </ItemGroup>

  <!-- Microsoft.XmlSerializer.Generator should not be marked as a platform item and be copy-local instead. -->
  <Target Name="CollectSharedFrameworkRuntimeFiles"
          Condition="'$(PlatformManifestFile)' != ''"
          BeforeTargets="GenerateFileVersionProps">
    <ItemGroup Condition="'$(BuildingNETCoreAppVertical)' == 'true'">
      <_manualSharedFrameworkRuntimeFiles Include="System.Security.Cryptography.Native.OpenSsl.so" />
      <_manualSharedFrameworkRuntimeFiles Include="System.Security.Cryptography.Native.Apple.dylib" />
      <_manualSharedFrameworkRuntimeFiles Include="System.Security.Cryptography.Native.OpenSsl.dylib" />
    </ItemGroup>
    <ItemGroup>
      <SharedFrameworkRuntimeFiles Include="$(TestHostRuntimePath)*;@(_manualSharedFrameworkRuntimeFiles->'$(TestHostRuntimePath)%(Identity)')"
                                   Exclude="$(TestHostRuntimePath)dotnet-Microsoft.XmlSerializer.Generator.*"
                                   TargetPath="runtimes/" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="GenerateFileVersionProps" AssemblyFile="$(InstallerTasksAssemblyPath)"/>
  <Target Name="GenerateFileVersionProps" Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)' and '$(TargetOS)' != 'iOS'">
    <GenerateFileVersionProps Files="@(SharedFrameworkRuntimeFiles)"
                              PackageId="Microsoft.NETCore.App"
                              PackageVersion="$(ProductVersion)"
                              PlatformManifestFile="$(PlatformManifestFile)"
                              PreferredPackages="Microsoft.NetCore.App"
                              PermitDllAndExeFilesLackingFileVersion="true" />
  </Target>

  <!--
    Shared framework deps file generation.
    Produces a test shared-framework deps file.
    To use invoke target directly specifying NETCoreAppTestSharedFrameworkPath property.
  -->
  <UsingTask TaskName="GenerateTestSharedFrameworkDepsFile" AssemblyFile="$(InstallerTasksAssemblyPath)"/>
  <Target Name="GenerateTestSharedFrameworkDepsFile" Condition="'$(BuildTargetFramework)' == '$(NetCoreAppCurrent)' and '$(TargetOS)' != 'iOS'">
    <GenerateTestSharedFrameworkDepsFile SharedFrameworkDirectory="$(NETCoreAppTestSharedFrameworkPath)"
                                         RuntimeGraphFiles="$(RuntimeIdGraphDefinitionFile)"
                                         TargetRuntimeIdentifier="$(PackageRID)" />
  </Target>

  <!-- Generate launch settings support files to enable VS debugging. -->
  <Target Name="GenerateLaunchSettingsFiles" Condition="'$(EnableLaunchSettings)' == 'true'">
    <PropertyGroup>
      <_TestProjectRootDir>$(LibrariesProjectRoot)</_TestProjectRootDir>
      <_TestProjectRootDir Condition="'$(DirectoryToBuild)'!=''">$(DirectoryToBuild)</_TestProjectRootDir>
    </PropertyGroup>
    <ItemGroup>
      <!-- Keep in sync with pattern for test projects in tests.proj -->
      <TestProjects Include="$(_TestProjectRootDir)*\tests\**\*.Tests.csproj" />
    </ItemGroup>

    <MSBuild Projects="@(TestProjects)"
             Targets="GenerateLaunchSettingsFile"
             ContinueOnError="ErrorAndContinue" />
  </Target>

  <UsingTask TaskName="CreateFrameworkListFile" AssemblyFile="$(InstallerTasksAssemblyPath)"/>
  <Target Name="GenerateFrameworkListFile"
          Condition="'$(BinPlaceTestRuntimePack)' == 'true'"
          BeforeTargets="GetFiles">
    <PropertyGroup>
      <FrameworkListFilename>RuntimeList.xml</FrameworkListFilename>
      <FrameworkListFile>$(NETCoreAppRuntimePackPath)/data/$(FrameworkListFilename)</FrameworkListFile>
    </PropertyGroup>

    <ItemGroup>
      <_rpLibFiles Include="$(NETCoreAppRuntimePackLibPath)\*.*" />
      <_rpNativeFiles Include="$(NETCoreAppRuntimePackNativePath)\*.*" />

      <_runtimePackFiles Include="@(_rpLibFiles)">
        <TargetPath>$(RuntimePackTargetFrameworkPath)/lib/$(NETCoreAppFramework)</TargetPath>
        <IsSymbolFile Condition="$([System.String]::Copy('%(Identity)').EndsWith('pdb'))">true</IsSymbolFile>
      </_runtimePackFiles>
      <_runtimePackFiles Include="@(_rpNativeFiles)">
        <TargetPath>$(RuntimePackTargetFrameworkPath)/native</TargetPath>
        <IsNative>true</IsNative>
      </_runtimePackFiles>
      <FrameworkListRootAttributes Include="Name" Value=".NET $(NETCoreAppFrameworkVersion)" />
      <FrameworkListRootAttributes Include="TargetFrameworkIdentifier" Value="$(NETCoreAppFrameworkIdentifier)" />
      <FrameworkListRootAttributes Include="TargetFrameworkVersion" Value="$(NETCoreAppFrameworkVersion)" />
      <FrameworkListRootAttributes Include="FrameworkName" Value="$(SharedFrameworkName)" />
    </ItemGroup>

    <CreateFrameworkListFile
      Files="@(_runtimePackFiles)"
      TargetFile="$(FrameworkListFile)"
      TargetFilePrefixes="ref/;runtimes/"
      RootAttributes="@(FrameworkListRootAttributes)" />
  </Target>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

  <Target Name="Build"
          Condition="'$(SkipPrepareTest)' != 'true'"
          DependsOnTargets="GenerateLaunchSettingsFiles;GenerateTestSharedFrameworkDepsFile;GenerateFileVersionProps;GenerateFrameworkListFile">

    <MSBuild Targets="Build"
             Projects="@(Project)"
             Properties="TargetFramework=$(BuildTargetFramework);%(Project.AdditionalProperties)"
             BuildInParallel="true"
             ContinueOnError="ErrorAndStop" 
             Condition="'$(SkipBuildProjects)' != 'true'"/>

    <!-- Given we ErrorAndContinue we need to propagate the error if the overall task failed -->
    <Error Condition="'$(MSBuildLastTaskResult)' == 'false'" />

  </Target>
</Project>
